name: Remote Update and Deploy

on:
  push:
    branches:
      - main # Triggers the workflow on pushes to the master branch

jobs:
  remote-update-and-deploy:
    runs-on: ubuntu-latest # Specifies the runner environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3 # Checkout the latest code from the repository

      - name: Setup Node.js Environment
        uses: actions/setup-node@v3 # Set up Node.js environment
        with:
          node-version: '18.20.4' # Update to Node.js version 18.20.4

      - name: Connect to Remote Server and Run Update Commands
        uses: appleboy/ssh-action@v0.1.10 # Updated SSH action to connect to the remote server
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          password: ${{ secrets.HOSTINGER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # Navigate to the project directory
            cd /var/www/html/ve-shop.co/ve-frontend

            # Log the current status
            echo "Starting remote deployment on ve-frontend..."

            # Stash any local changes and pull the latest changes from the master branch
            git stash --include-untracked
            git pull origin master

            # Remove package-lock.json and node_modules if they exist
            [ -f package-lock.json ] && rm package-lock.json
            [ -d node_modules ] && rm -rf node_modules

            # Install dependencies using npm
            npm install # This will create a new package-lock.json

            # Log the installation status
            echo "npm dependencies installed."

            # Pre-copy build files from the public directory (cleanup)
            npm run precopy-build

            # Build the project for production
            npm run build

            # Ensure the build was successful before proceeding
            if [ -d ".next" ] && [ "$(ls -A .next)" ]; then
              echo "Build successful!"
              npm run copy-build  # Copy the build files to the public directory
            else
              echo "Build failed!"
              exit 1
            fi

            # Log successful deployment
            echo "Deployment completed successfully."
          timeout: 3m # Increase timeout for more flexibility (3 minutes)
          command_timeout: 15m # Allow 15 minutes for build and copy operations
          debug: true # Enable debugging for detailed logs
